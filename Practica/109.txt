#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
bool flag=true;
vector < vector <int> > g;
vector <bool> used;
vector <int> vec;

void dfs(int v1,int v2)
{
	used[v1] = true;
	if (v1 == v2)
	{
		flag = false;
		vec.push_back(v1);
		return;
	}
	for (int j = 0; j < n; j++)
		if ((g[v1][j] == 1) && (used[j] != true))
		{
			dfs(j, v2);
			if (flag == false)
			{
				vec.push_back(v1);
				break;
			}
		}
}

int main()
{
	int v1, v2;
	cin >> n >> v1 >> v2;
	g.resize(n);
	used.resize(n);
	for (int i = 0; i < n; i++)
	{
		g[i].resize(n);
		for (int j = 0; j < n; j++)
			cin >> g[i][j];
	}
	v1--;
	v2--;
	dfs(v1, v2);
	reverse(vec.begin(), vec.end());
	if (vec.empty())
		cout << "-1" << endl;
	else
	{
		cout << vec.size() - 1 << endl;
		for (int i = 0; i < vec.size(); i++)
			cout << vec[i]+1 << " ";
		return 0;
	}
}