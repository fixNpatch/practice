#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cmath>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <iomanip>

using namespace std;

vector<int> d;

void heap_add(vector <pair <int, int>> &h, int x, int pos)
{
    h.push_back(make_pair(x, pos));
    d.push_back(h.size() - 1);
    pos = h.size() - 1;
    while (pos/2 >= 0 && h[pos/2].first > h[pos].first)
    {
        swap(h[(pos)/2], h[pos]);
        swap(d[h[pos].second], d[h[(pos)/2].second]);
        pos = (pos)/2;
    }
}

void heapify(vector <pair <int, int>> &h, int pos, int x)
{
    while(2*pos + 1 < x)
    {
        int j = 2*pos + 1;
        if ((j + 1) < x && h[j+1].first > h[j].first)
            j++;
        if (h[pos].first < h[j].first)
        {
            swap(h[j],h[pos]);
            swap(d[h[pos].second], d[h[j].second]);
            pos = j;
        }
        else
            break;
    }
}

void HeapRemove(vector <pair <int, int>> &h, int k) {
    int j = d[k];
    swap(h[j], h[h.size() - 1]);
    swap(d[h[j].second], d[h[h.size() - 1].second]);
    h.pop_back();
    heapify(h, j, h.size());
}


int find(vector <pair <int, int>> &h, int m)
{
    vector<int> temp;
    int max_temp = min(64, int(h.size()));
    for (int i = 0; i < max_temp; i++)
        temp.push_back(h[i].first);
    nth_element(temp.begin(), temp.begin() + m, temp.end());
    return temp[m];
}

int main()
{
   ios_base::sync_with_stdio(false);
   int n,x,m,k;
   char c;
   cin >> n;
   vector <pair <int, int>> vec;
   int counter = 0;
   for (int i = 0; i < n; i++)
   {
       cin >> c;
       if (c == 'A')
       {
           for (int i = 0; i < 3; i++)
               cin >> c;
           cin >> x;
           heap_add(vec, x, counter);
           counter++;
           cin >> c;
           continue;
       }
       if (c == 'F')
       {
           for (int i = 0; i < 4; i++)
               cin >> c;
           cin >> m;
           m--;
           cout << find(vec, m) << endl;
           cin >> c;
           continue;
       }
       if (c == 'D')
       {
           for (int i = 0; i < 3; i++)
               cin >> c;
           cin >> k;
           k--;
           HeapRemove(vec, k);
           cin >> c;
           continue;
       }
   }
   return 0;
}
