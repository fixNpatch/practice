#include <vector>
#include <cstdio>
#include <ctime>
#include <cassert>
#include <algorithm>
#include <iostream>
using namespace std;

void heapify(vector<int> &v, int pos, int h){
	int j;
	while(2*pos + 1 < h){
		j = 2*pos + 1;
		if((j + 1 < h) && (v[j+1] > v[j])){
			j++;
		}
		if(v[j] > v[pos]){
			swap(v[j], v[pos]);
			pos = j;
		}
		else break;
	}
}
void heapsort(vector<int> &v, int h){
	for (int i = h - 1; i >= 0; i--)
        heapify(v, i, h);
    while(h>1){
		swap(v[h-1], v[0]);
		h--;
		heapify(v, 0, h);
	}
}
void tripleHeapify(vector<int> &v, int pos, int h){
	int j, k, vk;
	while(3*pos+1 < h){
		j = 3*pos + 1;
		k = j;
		vk = v[k];
		if((j + 1 < h) && (v[j+1] > vk))
			k = j + 1, vk = v[k];
		if((j + 2 < h) && (v[j+2] > vk))
			k = j + 2, vk = v[k];
		j = k;
		if(vk > v[pos]){
			swap(v[j], v[pos]);
			pos = j;
		}
		else break;
	}
}
void tripleHeapsort(vector<int> &v, int h){
	for (int i = h - 1; i >= 0; i--)
        tripleHeapify(v, i, h);
	
    while(h>1){
		swap(v[h-1], v[0]);
		h--;
		tripleHeapify(v, 0, h);
	}
}
void mergeFunc(vector<int> &v, int l, int m, int r, vector<int> &tmp){
	int pos1 = l;
	int pos2 = m + 1;
	int posBuff = l;
	while(pos1 <= m && pos2 <= r){
		if(v[pos1]<v[pos2]) tmp[posBuff++] = v[pos1++];
		else tmp[posBuff++] = v[pos2++];
	}
	while(pos2 <= r)
		tmp[posBuff++] = v[pos2++];
	while(pos1 <= m)
		tmp[posBuff++] = v[pos1++];
	for (int i = 0; i < r - l + 1; i++)
		v[l+i] = tmp[l+i];
}
void mergeSort(vector<int> &v, int l, int r, vector<int> &tmp){
	if(l < r){
		int m = (l + r) / 2;
		mergeSort(v, l, m, tmp);
		mergeSort(v, m + 1, r, tmp);
		mergeFunc(v, l, m, r, tmp);
	}
}
void mergeSort(vector<int> &v){
	if(!v.empty()){
		vector<int> tmp(v.size());
		mergeSort(v, 0, v.size() - 1, tmp);
	}
}
void mergeTripeFunc(vector<int> &v, int l, int r, vector<int> &tmp){
	int pos1 = l;
	int pos2 = (r + 2 * l) / 3 + 1;
	int pos3 = (2 * r + l) / 3 + 1;
	int k = 0;
	int j = 0;

	while (k < r - l + 1){
		if ((pos1 <= (r + 2 * l) / 3) && ((pos2 > (2 * r + l) / 3) || (v[pos1] <= v[pos2]))){
			if ((pos3 <= r) && (v[pos3] <= v[pos1])) j = pos3++;
			else j = pos1++;
		}
		else{
			if ((pos3 <= r) && ((pos2 > (2 * r + l) / 3) || (v[pos3] <= v[pos2]))) j = pos3++;
			else j = pos2++;
		}
		tmp[k++] = v[j];
	}

	for (int i = 0; i < k; i++)
		v[i + l] = tmp[i];
}
void mergeTripleSort(vector<int> &v, int l, int r, vector<int> &tmp){
	if(l < r){
		mergeTripleSort(v, l, (r + 2 * l) / 3, tmp);
		mergeTripleSort(v, (r + 2 * l) / 3 + 1, (2 * r + l) / 3, tmp);
		mergeTripleSort(v, (2 * r + l) / 3 + 1, r, tmp);
		mergeTripeFunc(v, l, r, tmp);
	}
}
void mergeTripleSort(vector<int> &v){
	if(!v.empty()){
		vector<int> tmp(v.size());
		mergeTripleSort(v, 0, v.size() - 1, tmp);
	}
}
pair<int, int> partition(vector<int> &v, int l, int r){
	// int pvt = v[(l+r)/2]; overflow
	int pvt = v[l+(r-l)/2];
	int i = l, j = r;
	while(i <= j){
		while(v[i] < pvt) i++;
		while(v[j] > pvt) j--;
		if(i <= j) swap(v[i++],v[j--]);
	}
	pair<int, int> ij;
	ij.first = i, ij.second = j;
	return ij;
}
void qksort(vector<int> &v, int l, int r){
	if(l < r){
		pair<int, int> ij = partition(v, l, r);
		int i = ij.first, j = ij.second;
		if(j>l) qksort(v, l, j);
		if(i<r) qksort(v, i, r);
	}
}


int main(){
	int A = 1;
	const int B = 100000;
	cout << "numbers\tsort\thSort\t3xhSort\tmSort\t3xmSort\tqkSort" << endl; 
	//for(int len = 0; len <= 10 * B; len+=B){
	for(int len = 0; len <= 10 * A; len+=A){
		if(len == 10){
			A = 1000000;
			len = A;
		}
		vector<int> a (len);
		
		for(int i=0; i < len; i++)
			a[i] = (rand() << 15) ^ rand();

		vector<int> b0 (a);
		vector<int> b1 (a);
		vector<int> b2 (a);
		vector<int> b3 (a);
		vector<int> b4 (a);
		vector<int> b5 (a);

		int h0 = clock();
		sort(b0.begin(), b0.end());
		h0 = clock() - h0;

		int h1 = clock();
		heapsort(b1, len);
		h1 = clock() - h1;

		int h2 = clock();
		tripleHeapsort(b2, len);
		h2 = clock() - h2;

		int h3 = clock();
		mergeSort(b3);
		h3 = clock() - h3;

		int h4 = clock();
		mergeTripleSort(b4);
		h4 = clock() - h4;

		int h5 = clock();
		qksort(b5, 0, b5.size() - 1);
		h5 = clock() - h5;


		if (b0!=b1) {
			cout << "ERROR b0 b1" << endl;
			exit(1);
		}
		if (b1!=b2) {
			cout << "ERROR b1 b2" << endl;
			exit(1);
		}
		if (b2!=b3) {
			cout << "ERROR b2 b3" << endl;
			exit(1);
		}

		if (b3!=b4) {
			cout << "ERROR b3 b4" << endl;
			exit(1);
		}

		if (b4!=b5) {
			cout << "ERROR b4 b5" << endl;
			exit(1);
		}
		
		cout << len << "\t" << h0 << " \t" << h1 << " \t" << h2 << " \t" << h3 << "\t" << h4 << "\t" << h5 << endl; 

	}
	system("pause");
	return 0;
}
